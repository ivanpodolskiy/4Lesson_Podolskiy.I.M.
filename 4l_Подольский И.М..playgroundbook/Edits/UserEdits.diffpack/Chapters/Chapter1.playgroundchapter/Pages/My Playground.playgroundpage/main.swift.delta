<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>

class Car {
    let mark: String
    let year: Int
    var windows: WindowsStatus
    var engine: EngineStatus
    var trunkVolume: Int
    var freeVolume: Int = 0
    
    enum WindowsStatus: String {
        case open = "–æ–∫–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã"
        case closed = "–æ–∫–∞–Ω –∑–∞–∫—Ä—ã—Ç—ã"
    }
    
    enum EngineStatus: String {
        case off = "–¥–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à–µ–Ω"
        case on = "–¥–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–≤–µ–¥–µ–Ω"
    }
    
    func loadCargo(cargo: Int) { // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–∑–∞
        freeVolume = trunkVolume
        if cargo &lt;= freeVolume {
            freeVolume -= cargo
            print ("–û–±—ä–µ–º —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ \(cargo) –ª–∏—Ç—Ä–æ–≤. –°–≤–æ–±–æ–¥–Ω–æ \(freeVolume) | \(trunkVolume)")
        } else {
            print ("–ì—Ä—É–∑ –Ω–µ –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª—å—à–µ \(freeVolume) –ª–∏—Ç—Ä–æ–≤")
        }
    }
    
    func unload–°argo(cargo: Int) { //—Ä–∞–∑–≥—Ä—É–∑–∫–∞
        var occupiedVolume = trunkVolume - freeVolume
        if cargo &lt;= occupiedVolume{
            freeVolume += cargo
            occupiedVolume -= cargo
            print ("–û–±—ä–µ–º —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ \(cargo) –ª–∏—Ç—Ä–æ–≤. –°–≤–æ–±–æ–¥–Ω–æ \(freeVolume) | \(trunkVolume)")
        } else {
            freeVolume += occupiedVolume
            print ("–ë–∞–≥–∞–∂–Ω–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å —Å–≤–æ–±–æ–¥–µ–Ω. –°–≤–æ–±–æ–¥–Ω—ã–π –æ–±—ä–µ–º –±–∞–≥–∞–∂–∞ \(freeVolume) –ª–∏—Ç—Ä–æ–≤")
        }
    }
    
    func actionWindows() {
        switch windows {
        case .open:
            self.windows = .closed
            print ("–í—ã –∑–∞–∫—Ä—ã–ª–∏ –æ–∫–Ω–∞")
            case .closed:
                self.windows = .open
                print ("–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –æ–∫–Ω–∞")
        }
    }
    
    func actionEngine(){
        switch engine {
        case .off:
            self.engine = .on 
            print ("–í—ã –∑–∞–≤–µ–ª–∏ –¥–≤–∏–∂–æ–∫")
            case .on:
                self.engine = .off
                print ("–í—ã –∑–∞–≥–ª—É—à–∏–ª–∏ –¥–≤–∏–∂–æ–∫")
        }
    }
    
    func deception() {
        print ("–ú–∞—Ä–∫–∞: \(mark) | –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: \(year) | –û–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞: \(trunkVolume) –ª–∏—Ç—Ä–æ–≤ | \(engine.rawValue) | \(windows.rawValue)")
    }
    
    init (mark: String, year: Int, windows: WindowsStatus, engine: EngineStatus, trunkVolume: Int) {
        self.mark = mark
        self.year = year 
        self.windows = windows 
        self.engine = engine 
        self.trunkVolume = trunkVolume 
        freeVolume = trunkVolume
    }
}

var bmwCar = Car(mark: "BMW", year: 1998, windows: .closed, engine: .on, trunkVolume: 500)
bmwCar.deception()
bmwCar.actionWindows()
bmwCar.actionEngine()

print ("//////////////")

class TrunkCar: Car {
    var trailer: StatusTrailer
    var petrol: Int
    
    enum StatusTrailer: String {
        case attached = "–¢—Ä–µ–π–ª–µ—Ä –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω"
        case detached = "–¢—Ä–µ–π–ª–µ—Ä –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω"
    }
    
    func drive (km: Int) { 
        petrol -= (km/4)
        if petrol &lt;= 0 {
            engine = .on
            print ("–£ –≤–∞—Å –∫–æ–Ω—á–∏–ª—Å—è –±–µ–Ω–∑–∏–Ω, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞–ª—å—à–µ –ø–æ–µ—Ö–∞—Ç—å.")
        } else {
            print ("–í—ã –ø—Ä–æ–µ—Ö–∞–ª–∏ \(km) –∫–º. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å \(petrol) –ª–∏—Ç—Ä–æ–≤ –±–µ–Ω–∑–∏–Ω–∞.")
            engine = .off
        }
    }
    
    func refueling (liters: Int) { 
        petrol = liters
        print ("–í—ã –∑–∞–ø—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞ \(liters) –ª–∏—Ç—Ä–æ–≤")
    }
    
        func actionTrailer() {
            switch trailer {
            case .attached:
                self.trailer = .detached
                print ("–í—ã –æ—Ç—Ü–µ–ø–∏–ª–∏ –ø—Ä–∏—Ü–µ–ø")
                case .detached:
                    self.trailer = .attached
                    print ("–í—ã –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –ø—Ä–∏—Ü–µ–ø")
            }
        }
    
    init(mark: String, year: Int, windows: WindowsStatus, engine: EngineStatus, trunkVolume: Int, trailer: StatusTrailer, petrol: Int) {
        self.petrol = petrol
        self.trailer = trailer
        super.init(mark: mark, year: year, windows: windows, engine: engine, trunkVolume: trunkVolume)
    }
    
    override func deception() {
        print ("–ú–∞—Ä–∫–∞: \(mark) | –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: \(year) | –û–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞: \(trunkVolume) –ª–∏—Ç—Ä–æ–≤ | \(engine.rawValue) | \(windows.rawValue) \n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \(petrol) –ª–∏—Ç–æ–≤ –±–µ–Ω–∑–∏–Ω–∞ | \(trailer.rawValue)")
    }
    
}


var bigCar = TrunkCar(mark: "–í–ê–ó", year: 1998, windows: .closed, engine: .on, trunkVolume: 500, trailer: .detached, petrol: 50)
bigCar.deception()
bigCar.actionTrailer()
bigCar.drive(km: 30)
bigCar.drive(km: 400)
bigCar.refueling(liters: 70)


print ("////////////////////////////")

class SportCar: Car {
    var color: StatusColor
    var luke: StatusLuke
    var maximumSpeed: Int
    
    enum StatusColor: String {
    case green = "üü¢"
    case red = "üî¥"
        case yellow = "üü°"
        case orange = "üü†"
    }
    
    
    enum StatusLuke: String {
        case open = "–õ—é–∫ –æ—Ç–∫—Ä—ã—Ç"
        case closed = "–õ—é–∫ –∑–∞–∫—Ä—ã—Ç"
    }
    
    func actionLunk() {
        switch luke {
        case .open:
            self.luke = .closed
            print ("–í—ã –∑–∞–∫—Ä—ã–ª–∏ –ª—é–∫")
            case .closed:
            self.luke = .open
                print ("–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ª—é–∫")
        }
        
    }
    
    override func deception() {
        print ("–ú–∞—Ä–∫–∞: \(mark) | –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: \(year) | –û–±—ä–µ–º –±–∞–≥–∞–∂–Ω–∏–∫–∞: \(trunkVolume) –ª–∏—Ç—Ä–æ–≤ | \(engine.rawValue) | \(windows.rawValue) \n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –¶–≤–µ—Ç \(color.rawValue)| –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: \(maximumSpeed) –∫–º –≤ —á–∞—Å | \(luke.rawValue)")
    }
    
    init(mark: String, year: Int, windows: WindowsStatus, engine: EngineStatus, trunkVolume: Int, color: StatusColor, luke :StatusLuke, maximumSpeed: Int ) {
        self.maximumSpeed = maximumSpeed
        self.luke = luke
        self.color = color
        super.init(mark: mark, year: year, windows: windows, engine: engine, trunkVolume: trunkVolume)
    }
    
}

var superCar = SportCar(mark: "Lamborghini", year: 2018, windows: .closed, engine: .on, trunkVolume: 50, color: .red, luke: .closed, maximumSpeed: 250)
superCar.deception()
superCar.maximumSpeed
superCar.actionLunk()
superCar.loadCargo(cargo: 20)
superCar.unload–°argo(cargo: 15)
</string>
			<key>ModifiedRange</key>
			<string>{1, 5854}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
